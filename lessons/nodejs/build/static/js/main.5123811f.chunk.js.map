{"version":3,"sources":["client/components/Dialog/Dialog.js","client/components/Users/userHook.js","client/components/Users/UserDialogItem.js","client/components/Users/Users.js","client/components/App/App.js","client/serviceWorker.js","index.js"],"names":["Dialog","children","onClose","dialogRef","useRef","useEffect","current","showModal","ref","className","id","method","onClick","close","type","name","dob","location","title","first","last","age","city","country","Users","a","window","fetch","response","json","users","results","map","user","Math","random","dispatch","payload","fetchData","useReducer","state","action","isLoading","failed","showDialog","selectedUser","find","u","Error","onClickHandler","e","Number","currentTarget","dataset","target","onDialogClose","userHook","info","r","i","key","data-target","href","UserDialogItem","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5123811f.chunk.js","sourcesContent":["import React, {useRef, useEffect} from 'react';\nimport './Dialog.css';\n\nconst Dialog = ({children, onClose = () => {}}) => {\n  const dialogRef = useRef(null)\n  const onCloseHandler = () => {\n    dialogRef.current.close();\n    onClose();\n  };\n  useEffect(() => dialogRef.current.showModal(), []);\n  return (\n    <dialog ref={dialogRef} className=\"dialog\" id=\"dialog\">\n      <form method=\"dialog\">\n        <section className=\"dialog__content\" id=\"content\">\n          {children}\n        </section>\n        <menu className=\"dialog__menu\">\n          <button id=\"close\" onClick={onCloseHandler} className=\"dialog__menu__button\" type=\"reset\">Close</button>\n        </menu>\n      </form> \n    </dialog>\n  )\n};\n\nexport default Dialog;","import { useEffect, useReducer } from \"react\";\n\nexport default () => {\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case \"USER_DATA\": {\n        return {\n          ...state,\n          isLoading: false,\n          failed: false,\n          users: action.payload\n        };\n      }\n      case \"USER_ERROR\": {\n        return {\n          ...state,\n          isLoading: false,\n          failed: true\n        };\n      }\n      case \"SHOW_USER\": {\n        return {\n          ...state,\n          showDialog: true,\n          selectedUser: state.users.results.find(u => u.id === action.payload)\n        };\n      }\n      case \"RESET\": {\n        return {\n          ...state,\n          showDialog: false,\n          selectedUser: null\n        };\n      }\n      default:\n        throw new Error();\n    }\n  };\n\n  const initialState = {\n    isLoading: true,\n    failed: false,\n    users: null,\n    showDialog: null,\n    selectedUser: null\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await window.fetch(\"/api/user?results=20\");\n        const users = await response.json();\n        users.results = users.results.map(user => ({\n          ...user,\n          id: Math.random() * 1e17\n        }));\n        dispatch({ type: \"USER_DATA\", payload: users });\n      } catch (err) {\n        dispatch({ type: \"USER_ERROR\" });\n      }\n    };\n    fetchData();\n  }, []);\n\n  const onClickHandler = e =>\n    dispatch({\n      type: \"SHOW_USER\",\n      payload: Number(e.currentTarget.dataset.target)\n    });\n  const onDialogClose = () => dispatch({ type: \"RESET\" });\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return {\n    onClickHandler,\n    onDialogClose,\n    state\n  };\n};\n","import React from 'react';\n\nexport default ({name, dob, location}) => {\n  return (\n    <>\n      <h3>{name.title} {name.first} {name.last}</h3>\n      <p><strong>Age: </strong> {dob.age}</p>\n      <p><strong>City: </strong>{location.city}</p>\n      <p><strong>Country: </strong>{location.country}</p>\n    </>\n  );\n}","import React, {useEffect, useReducer} from 'react';\nimport './users.css';\nimport Dialog from '../Dialog/Dialog';\nimport userHook from './userHook';\nimport UserDialogItem from './UserDialogItem';\n\n\nconst Users = () => {\n  const {\n    onClickHandler,\n    onDialogClose,\n    state,\n  } = userHook();\n\n  const {isLoading, users, showDialog, selectedUser} = state;\n\n  return (\n    <>\n      <div className=\"users\">\n        {isLoading && <p className=\"users__loading\">Loading</p>}\n        {users && <p className=\"users__total\">Total users {users.info.results}</p>}\n        {users && users.results.map((r, i) => \n          <div key={r.id} className=\"users__user\">\n            <a className=\"users__user__a\" onClick={onClickHandler} data-target={r.id} href=\"#\">{r.name.title} {r.name.first} {r.name.last}</a>\n          </div>\n        )}\n      </div>\n      {showDialog &&\n        <Dialog onClose={onDialogClose}>\n          <UserDialogItem name={selectedUser.name} dob={selectedUser.dob} location={selectedUser.location} />\n        </Dialog>\n      }\n    </>\n  )\n};\n\nexport default Users;","import React from 'react';\nimport './App.css';\nimport Users from '../Users/Users';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Welcome to the app\n      </header>\n      <section className=\"container\">\n        <Users name=\"Pei\" />\n      </section>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./client/index.css\";\nimport App from \"./client/components/App/App\";\nimport * as serviceWorker from \"./client/serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}